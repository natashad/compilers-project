
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 27 02:27:29 EST 2014
//----------------------------------------------------

package compiler488.parser;

import java_cup.runtime.*;
import compiler488.ast.*;
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;
import compiler488.semantics.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 27 02:27:29 EST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\005" +
    "\006\000\002\005\005\000\002\005\004\000\002\004\003" +
    "\000\002\004\004\000\002\006\003\000\002\006\004\000" +
    "\002\003\006\000\002\003\007\000\002\003\011\000\002" +
    "\003\007\000\002\003\006\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\006\000\002\003\003\000" +
    "\002\007\006\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\013\003\000\002\013" +
    "\005\000\002\014\003\000\002\014\006\000\002\014\010" +
    "\000\002\011\003\000\002\011\006\000\002\012\003\000" +
    "\002\012\004\000\002\010\003\000\002\010\003\000\002" +
    "\015\011\000\002\016\007\000\002\026\003\000\002\026" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\024\003\000\002\024\005\000\002\020\003\000" +
    "\002\020\002\000\002\021\003\000\002\021\005\000\002" +
    "\017\003\000\002\017\002\000\002\023\003\000\002\023" +
    "\005\000\002\022\005\000\002\027\003\000\002\027\005" +
    "\000\002\030\003\000\002\030\005\000\002\031\003\000" +
    "\002\031\004\000\002\032\003\000\002\032\005\000\002" +
    "\032\006\000\002\032\005\000\002\032\006\000\002\032" +
    "\005\000\002\032\006\000\002\033\003\000\002\033\005" +
    "\000\002\033\005\000\002\034\003\000\002\034\005\000" +
    "\002\034\005\000\002\035\003\000\002\035\004\000\002" +
    "\036\003\000\002\036\003\000\002\036\005\000\002\036" +
    "\011\000\002\036\006\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\006\000" +
    "\002\040\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\043\006\001\002\000\004\002\260\001" +
    "\002\000\004\002\000\001\002\000\040\011\010\013\023" +
    "\014\024\015\020\016\034\017\011\020\021\021\015\022" +
    "\031\024\032\026\033\027\017\043\006\044\026\060\014" +
    "\001\002\000\036\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\026\ufffa" +
    "\027\ufffa\043\ufffa\060\ufffa\001\002\000\042\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\026\ufff3\027\ufff3\031\256\043\ufff3\044" +
    "\ufff3\060\ufff3\001\002\000\004\060\252\001\002\000\040" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\026\uffec\027\uffec\043\uffec" +
    "\044\uffec\060\uffec\001\002\000\040\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\026\ufffc\027\ufffc\043\ufffc\044\ufffc\060\ufffc\001" +
    "\002\000\010\037\247\041\040\052\uffac\001\002\000\020" +
    "\034\056\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\001\002\000\004\043\006\001\002\000\040\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\026\ufff0\027\ufff0\043\ufff0\044\ufff0" +
    "\060\ufff0\001\002\000\020\034\056\035\047\036\052\037" +
    "\057\054\041\060\043\061\061\001\002\000\024\025\230" +
    "\034\056\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\062\224\001\002\000\004\043\006\001\002\000\006" +
    "\014\024\017\011\001\002\000\004\060\204\001\002\000" +
    "\036\011\010\013\023\014\024\015\020\016\034\017\011" +
    "\020\021\021\015\022\031\024\032\026\033\027\017\043" +
    "\006\060\014\001\002\000\052\002\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd" +
    "\027\ufffd\043\ufffd\044\ufffd\060\ufffd\001\002\000\004\052" +
    "\176\001\002\000\030\011\010\015\020\016\034\020\021" +
    "\021\015\022\031\026\033\027\017\043\006\044\175\060" +
    "\014\001\002\000\026\011\010\015\020\016\034\020\021" +
    "\021\015\022\031\026\033\027\017\043\006\060\014\001" +
    "\002\000\004\060\143\001\002\000\020\034\056\035\047" +
    "\036\052\037\057\054\041\060\043\061\061\001\002\000" +
    "\004\060\037\001\002\000\042\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\026\uffee\027\uffee\043\uffee\044\uffee\050\137\060\uffee" +
    "\001\002\000\042\007\uffd4\010\uffd4\011\uffd4\012\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4" +
    "\027\uffd4\043\uffd4\044\uffd4\050\uffd4\060\uffd4\001\002\000" +
    "\044\007\uffac\010\uffac\011\uffac\012\uffac\015\uffac\016\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\026\uffac\027\uffac\041" +
    "\040\043\uffac\044\uffac\050\uffac\060\uffac\001\002\000\020" +
    "\034\056\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\001\002\000\016\035\047\036\052\037\057\054\041" +
    "\060\043\061\061\001\002\000\062\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\032\067\033" +
    "\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\050\uffc9\052\uffc9" +
    "\057\uffc9\060\uffc9\001\002\000\106\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\015\uffac\016\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\026\uffac\027\uffac\030\uffac\032\uffac\033" +
    "\uffac\034\uffac\037\127\040\uffac\041\040\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\001\002" +
    "\000\102\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\076\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034\106" +
    "\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\111\046\107\047" +
    "\113\050\uffc3\052\uffc3\053\110\054\112\057\uffc3\060\uffc3" +
    "\001\002\000\102\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\040" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\052\uffbc\053\uffbc\054\uffbc\055\103\056\102\057" +
    "\uffbc\060\uffbc\001\002\000\102\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\015\uffae\016\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae" +
    "\034\uffae\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\001\002\000\102\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\026\uffb3\027\uffb3\030\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\062" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\040\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\050\uffc7\052\uffc7\057\uffc7\060\uffc7\001\002\000\102" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\015\uffad\016" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\026\uffad\027\uffad" +
    "\030\uffad\032\uffad\033\uffad\034\uffad\040\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\001" +
    "\002\000\010\033\065\042\076\050\077\001\002\000\102" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\032\uffb4\033\uffb4\034\uffb4\040\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001" +
    "\002\000\102\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\040\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\001\002\000\020\034\056\035\047\036\052\037" +
    "\057\054\041\060\043\061\061\001\002\000\020\034\056" +
    "\035\047\036\052\037\057\054\041\060\043\061\061\001" +
    "\002\000\062\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\050\uffc5\052\uffc5\057\uffc5\060\uffc5\001" +
    "\002\000\102\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\015\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\040\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\001\002\000\010\033\065\040\063\057\064\001" +
    "\002\000\102\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\001\002\000\020\034\056\035\047\036\052\037" +
    "\057\054\041\060\043\061\061\001\002\000\020\034\056" +
    "\035\047\036\052\037\057\054\041\060\043\061\061\001" +
    "\002\000\062\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\015\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\032\067\033\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\050\uffc8\052\uffc8\057\uffc8\060\uffc8\001" +
    "\002\000\020\034\056\035\047\036\052\037\057\054\041" +
    "\060\043\061\061\001\002\000\062\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\050\uffc6\052\uffc6" +
    "\057\uffc6\060\uffc6\001\002\000\006\033\065\052\072\001" +
    "\002\000\020\034\056\035\047\036\052\037\057\054\041" +
    "\060\043\061\061\001\002\000\006\033\065\040\074\001" +
    "\002\000\102\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\015\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\001\002\000\062\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\050\uffc4\052\uffc4\057\uffc4" +
    "\060\uffc4\001\002\000\102\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\015\uffab\016\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\026\uffab\027\uffab\030\uffab\032\uffab\033\uffab\034" +
    "\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\001\002\000\020\034\056\035\047" +
    "\036\052\037\057\054\041\060\043\061\061\001\002\000" +
    "\006\033\065\042\101\001\002\000\102\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\001\002\000\016\035" +
    "\047\036\052\037\057\054\041\060\043\061\061\001\002" +
    "\000\016\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\001\002\000\102\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\040\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\102\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002\000\004\045\125" +
    "\001\002\000\020\035\047\036\052\037\057\045\123\054" +
    "\041\060\043\061\061\001\002\000\016\035\047\036\052" +
    "\037\057\054\041\060\043\061\061\001\002\000\016\035" +
    "\047\036\052\037\057\054\041\060\043\061\061\001\002" +
    "\000\016\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\001\002\000\020\035\047\036\052\037\057\045\115" +
    "\054\041\060\043\061\061\001\002\000\066\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\032" +
    "\uffc0\033\uffc0\040\uffc0\042\uffc0\043\uffc0\044\uffc0\050\uffc0" +
    "\052\uffc0\053\110\054\112\057\uffc0\060\uffc0\001\002\000" +
    "\016\035\047\036\052\037\057\054\041\060\043\061\061" +
    "\001\002\000\066\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\050\uffbf\052\uffbf\053\110\054\112" +
    "\057\uffbf\060\uffbf\001\002\000\102\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\015\uffba\016\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033" +
    "\uffba\034\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\103\056\102\057\uffba\060\uffba\001\002\000\066\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\050" +
    "\uffc2\052\uffc2\053\110\054\112\057\uffc2\060\uffc2\001\002" +
    "\000\102\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\015" +
    "\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\103\056\102\057\uffbb\060" +
    "\uffbb\001\002\000\066\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\040\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\050\uffbe\052\uffbe\053\110\054" +
    "\112\057\uffbe\060\uffbe\001\002\000\016\035\047\036\052" +
    "\037\057\054\041\060\043\061\061\001\002\000\066\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\032\uffbd\033\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\050\uffbd\052\uffbd\053\110\054\112\057\uffbd\060\uffbd\001" +
    "\002\000\016\035\047\036\052\037\057\054\041\060\043" +
    "\061\061\001\002\000\066\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\026\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\040" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\050\uffc1\052\uffc1\053\110" +
    "\054\112\057\uffc1\060\uffc1\001\002\000\022\034\056\035" +
    "\047\036\052\037\057\040\uffd1\054\041\060\043\061\061" +
    "\001\002\000\010\033\065\040\uffd0\050\uffd0\001\002\000" +
    "\006\040\uffd2\050\134\001\002\000\004\040\133\001\002" +
    "\000\102\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\015" +
    "\uffb0\016\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\040\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\001\002\000\020\034\056\035\047\036\052\037\057" +
    "\054\041\060\043\061\061\001\002\000\010\033\065\040" +
    "\uffcf\050\uffcf\001\002\000\102\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\015\uffb5\016\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\001\002\000\004\060\037\001" +
    "\002\000\042\007\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027" +
    "\uffd3\043\uffd3\044\uffd3\050\uffd3\060\uffd3\001\002\000\042" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\026\ufff1\027\ufff1\033\065" +
    "\043\ufff1\044\ufff1\060\ufff1\001\002\000\006\050\uffe6\052" +
    "\uffe6\001\002\000\010\041\153\050\uffe4\052\uffe4\001\002" +
    "\000\006\050\145\052\146\001\002\000\004\060\143\001" +
    "\002\000\006\004\151\005\147\001\002\000\042\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\024\uffdd\026\uffdd\027\uffdd\040\uffdd\043\uffdd" +
    "\050\uffdd\060\uffdd\001\002\000\036\011\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\043\uffeb\060\uffeb\001\002\000" +
    "\042\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\040" +
    "\uffdc\043\uffdc\050\uffdc\060\uffdc\001\002\000\006\050\uffe5" +
    "\052\uffe5\001\002\000\006\054\157\061\154\001\002\000" +
    "\010\042\uffe1\050\uffe1\051\uffdf\001\002\000\004\051\165" +
    "\001\002\000\006\042\161\050\162\001\002\000\004\061" +
    "\160\001\002\000\010\042\uffde\050\uffde\051\uffde\001\002" +
    "\000\006\050\uffe3\052\uffe3\001\002\000\006\054\157\061" +
    "\154\001\002\000\004\042\164\001\002\000\006\050\uffe2" +
    "\052\uffe2\001\002\000\004\051\166\001\002\000\006\054" +
    "\157\061\167\001\002\000\006\042\uffdf\050\uffdf\001\002" +
    "\000\006\042\uffe0\050\uffe0\001\002\000\030\011\010\015" +
    "\020\016\034\020\021\021\015\022\031\023\173\026\033" +
    "\027\017\043\006\060\014\001\002\000\040\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\026\ufffb\027\ufffb\043\ufffb\044\ufffb\060" +
    "\ufffb\001\002\000\020\034\056\035\047\036\052\037\057" +
    "\054\041\060\043\061\061\001\002\000\042\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\026\ufff4\027\ufff4\033\065\043\ufff4\044" +
    "\ufff4\060\ufff4\001\002\000\052\002\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe" +
    "\027\ufffe\043\ufffe\044\ufffe\060\ufffe\001\002\000\004\045" +
    "\177\001\002\000\020\034\056\035\047\036\052\037\057" +
    "\054\041\060\043\061\061\001\002\000\042\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\026\ufff8\027\ufff8\033\065\043\ufff8\044" +
    "\ufff8\060\ufff8\001\002\000\036\011\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024" +
    "\ufff9\026\ufff9\027\ufff9\043\ufff9\060\ufff9\001\002\000\030" +
    "\011\010\015\020\016\034\020\021\021\015\022\031\026" +
    "\033\027\017\043\006\044\203\060\014\001\002\000\052" +
    "\002\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\026\uffff\027\uffff\043\uffff\044\uffff\060" +
    "\uffff\001\002\000\004\037\205\001\002\000\006\040\uffcd" +
    "\060\210\001\002\000\004\040\216\001\002\000\006\040" +
    "\uffce\050\214\001\002\000\004\052\212\001\002\000\006" +
    "\040\uffcc\050\uffcc\001\002\000\006\004\151\005\147\001" +
    "\002\000\006\040\uffca\050\uffca\001\002\000\004\060\210" +
    "\001\002\000\006\040\uffcb\050\uffcb\001\002\000\004\052" +
    "\217\001\002\000\006\004\151\005\147\001\002\000\036" +
    "\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\043\uffdb" +
    "\060\uffdb\001\002\000\036\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\026\uffe7\027\uffe7\043\uffe7\060\uffe7\001\002\000\036\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\024\uffe8\026\uffe8\027\uffe8\043\uffe8\060" +
    "\uffe8\001\002\000\036\011\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\026" +
    "\uffe9\027\uffe9\043\uffe9\060\uffe9\001\002\000\042\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\026\uffd6\027\uffd6\043\uffd6\044\uffd6" +
    "\050\uffd6\060\uffd6\001\002\000\042\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\026\uffef\027\uffef\043\uffef\044\uffef\050\231\060" +
    "\uffef\001\002\000\042\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026" +
    "\uffd9\027\uffd9\043\uffd9\044\uffd9\050\uffd9\060\uffd9\001\002" +
    "\000\044\007\uffd7\010\uffd7\011\uffd7\012\uffd7\015\uffd7\016" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\033\065\043\uffd7\044\uffd7\050\uffd7\060\uffd7\001\002\000" +
    "\042\007\uffd5\010\uffd5\011\uffd5\012\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\043" +
    "\uffd5\044\uffd5\050\uffd5\060\uffd5\001\002\000\024\025\230" +
    "\034\056\035\047\036\052\037\057\054\041\060\043\061" +
    "\061\062\224\001\002\000\042\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\026\uffd8\027\uffd8\043\uffd8\044\uffd8\050\uffd8\060\uffd8" +
    "\001\002\000\006\030\234\033\065\001\002\000\026\011" +
    "\010\015\020\016\034\020\021\021\015\022\031\026\033" +
    "\027\017\043\006\060\014\001\002\000\032\007\237\011" +
    "\010\012\236\015\020\016\034\020\021\021\015\022\031" +
    "\026\033\027\017\043\006\060\014\001\002\000\040\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\026\ufff7\027\ufff7\043\ufff7\044" +
    "\ufff7\060\ufff7\001\002\000\026\011\010\015\020\016\034" +
    "\020\021\021\015\022\031\026\033\027\017\043\006\060" +
    "\014\001\002\000\030\011\010\012\241\015\020\016\034" +
    "\020\021\021\015\022\031\026\033\027\017\043\006\060" +
    "\014\001\002\000\040\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\026" +
    "\ufff6\027\ufff6\043\ufff6\044\ufff6\060\ufff6\001\002\000\036" +
    "\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\024\uffea\026\uffea\027\uffea\043\uffea" +
    "\060\uffea\001\002\000\006\006\244\033\065\001\002\000" +
    "\026\011\010\015\020\016\034\020\021\021\015\022\031" +
    "\026\033\027\017\043\006\060\014\001\002\000\030\010" +
    "\246\011\010\015\020\016\034\020\021\021\015\022\031" +
    "\026\033\027\017\043\006\060\014\001\002\000\040\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\026\ufff5\027\ufff5\043\ufff5\044" +
    "\ufff5\060\ufff5\001\002\000\022\034\056\035\047\036\052" +
    "\037\057\040\uffd1\054\041\060\043\061\061\001\002\000" +
    "\004\040\251\001\002\000\040\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\026\uffed\027\uffed\043\uffed\044\uffed\060\uffed\001\002" +
    "\000\004\037\253\001\002\000\006\040\uffcd\060\210\001" +
    "\002\000\004\040\255\001\002\000\036\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\024\uffda\026\uffda\027\uffda\043\uffda\060\uffda\001\002" +
    "\000\020\034\056\035\047\036\052\037\057\054\041\060" +
    "\043\061\061\001\002\000\042\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\026\ufff2\027\ufff2\033\065\043\ufff2\044\ufff2\060\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\012\004\027\005\011" +
    "\006\024\007\006\015\015\016\021\040\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\242\030\041\031\050\032\057\033\044\034\045\035\054" +
    "\036\043\037\053\040\047\001\001\000\004\005\241\001" +
    "\001\000\002\001\001\000\026\027\232\030\041\031\050" +
    "\032\057\033\044\034\045\035\054\036\043\037\053\040" +
    "\047\001\001\000\032\025\225\026\224\027\226\030\041" +
    "\031\050\032\057\033\044\034\045\035\054\036\043\037" +
    "\053\040\047\001\001\000\004\005\222\001\001\000\006" +
    "\015\221\016\220\001\001\000\002\001\001\000\020\003" +
    "\012\004\201\005\011\007\200\015\015\016\021\040\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\171\005\011\040\026\001\001\000\012\003\012\004\170" +
    "\005\011\040\026\001\001\000\006\013\143\014\141\001" +
    "\001\000\026\027\140\030\041\031\050\032\057\033\044" +
    "\034\045\035\054\036\043\037\053\040\047\001\001\000" +
    "\006\024\034\040\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\052\030\041\031" +
    "\050\032\057\033\044\034\045\035\054\036\043\037\053" +
    "\040\047\001\001\000\012\035\135\036\043\037\053\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\031\074\032\057\033\044\034\045\035\054\036\043" +
    "\037\053\040\047\001\001\000\026\027\061\030\041\031" +
    "\050\032\057\033\044\034\045\035\054\036\043\037\053" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\070\030\041" +
    "\031\050\032\057\033\044\034\045\035\054\036\043\037" +
    "\053\040\047\001\001\000\024\030\065\031\050\032\057" +
    "\033\044\034\045\035\054\036\043\037\053\040\047\001" +
    "\001\000\002\001\001\000\022\031\067\032\057\033\044" +
    "\034\045\035\054\036\043\037\053\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\072\030\041" +
    "\031\050\032\057\033\044\034\045\035\054\036\043\037" +
    "\053\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\027\077\030" +
    "\041\031\050\032\057\033\044\034\045\035\054\036\043" +
    "\037\053\040\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\104\036\043\037\053\040\047\001\001" +
    "\000\012\035\103\036\043\037\053\040\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\033\121\034\045\035\054\036\043\037\053\040\047\001" +
    "\001\000\014\034\120\035\054\036\043\037\053\040\047" +
    "\001\001\000\016\033\117\034\045\035\054\036\043\037" +
    "\053\040\047\001\001\000\014\034\116\035\054\036\043" +
    "\037\053\040\047\001\001\000\016\033\113\034\045\035" +
    "\054\036\043\037\053\040\047\001\001\000\002\001\001" +
    "\000\016\033\115\034\045\035\054\036\043\037\053\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\033" +
    "\123\034\045\035\054\036\043\037\053\040\047\001\001" +
    "\000\002\001\001\000\016\033\125\034\045\035\054\036" +
    "\043\037\053\040\047\001\001\000\002\001\001\000\032" +
    "\020\131\021\130\027\127\030\041\031\050\032\057\033" +
    "\044\034\045\035\054\036\043\037\053\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\134\030\041\031\050\032\057" +
    "\033\044\034\045\035\054\036\043\037\053\040\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\151" +
    "\001\001\000\004\010\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\155\012\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\162\012\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\171\005\011\040\026\001\001\000\002\001\001" +
    "\000\026\027\173\030\041\031\050\032\057\033\044\034" +
    "\045\035\054\036\043\037\053\040\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\177\030\041\031\050\032\057\033\044\034\045\035\054" +
    "\036\043\037\053\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\171\005\011\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\205\022" +
    "\210\023\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\212\001" +
    "\001\000\002\001\001\000\004\022\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\025\231" +
    "\027\226\030\041\031\050\032\057\033\044\034\045\035" +
    "\054\036\043\037\053\040\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\012\004\234\005\011\040" +
    "\026\001\001\000\010\003\171\005\011\040\026\001\001" +
    "\000\002\001\001\000\012\003\012\004\237\005\011\040" +
    "\026\001\001\000\010\003\171\005\011\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\012\004\244\005\011\040\026\001\001\000\010" +
    "\003\171\005\011\040\026\001\001\000\002\001\001\000" +
    "\032\020\247\021\130\027\127\030\041\031\050\032\057" +
    "\033\044\034\045\035\054\036\043\037\053\040\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\253\022\210\023\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\027\256\030\041\031\050" +
    "\032\057\033\044\034\045\035\054\036\043\037\053\040" +
    "\047\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }



	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError); 
	}
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable ::= IDENT L_SQUARE expression COMMA expression R_SQUARE 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubsExpn(ident.toString(), (Expn)e1, (Expn)e2, identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable ::= IDENT L_SQUARE expression R_SQUARE 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubsExpn(ident.toString(), (Expn)e, null, identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable ::= IDENT 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentExpn(ident.toString(), identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constant ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConstExpn(false, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConstExpn(true, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constant ::= INTCONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstExpn(val, valleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= IDENT L_PAREN argumentList R_PAREN 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallExpn(ident.toString(), (ASTList<Expn>)args, identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primary ::= L_PAREN expression QUESTION expression COLON expression R_PAREN 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ConditionalExpn((Expn)cond, (Expn)tExp, (Expn)fExp, condleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= L_PAREN expression R_PAREN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (Expn)exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // primary ::= constant 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)con; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= MINUS factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryMinusExpn((Expn)f, fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= primary 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term DIVIDE factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithExpn("/", (Expn)t, (Expn)f, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= term TIMES factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithExpn("*", (Expn)t, (Expn)f, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arithExpn ::= arithExpn MINUS term 
            {
              Object RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithExpn("-", (Expn)aExp, (Expn)t, aExpleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithExpn ::= arithExpn PLUS term 
            {
              Object RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aExp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithExpn("+", (Expn)aExp, (Expn)t, aExpleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithExpn ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compareExpn ::= arithExpn GREATER EQUAL arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareExpn(">=", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compareExpn ::= arithExpn GREATER arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareExpn(">", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compareExpn ::= arithExpn LESS EQUAL arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareExpn("<=", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compareExpn ::= arithExpn LESS arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareExpn("<", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compareExpn ::= arithExpn NOT EQUAL arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsExpn("not =", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compareExpn ::= arithExpn EQUAL arithExpn 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsExpn("=", (Expn)a1, (Expn)a2, a1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compareExpn ::= arithExpn 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // negation ::= NOT negation 
            {
              Object RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpn("not", (Expn)neg, negleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // negation ::= compareExpn 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negation",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjunction ::= conjunction AND negation 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolExpn("and", (Expn)con, (Expn)neg, conleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conjunction ::= negation 
            {
              Object RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)neg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression OR conjunction 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolExpn("or", (Expn)exp, (Expn)con, expleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= conjunction 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)con; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter ::= IDENT COLON type 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ScalarDecl(name.toString(), (Type)t, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<ScalarDecl>)pList).addLast((ScalarDecl)p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameters ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<ScalarDecl>((ScalarDecl)p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameterList ::= 
            {
              Object RESULT =null;
		 RESULT = new ASTList<ScalarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameterList ::= parameters 
            {
              Object RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ASTList<ScalarDecl>)pList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arguments ::= arguments COMMA expression 
            {
              Object RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<Expn>)aList).addLast((Expn)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arguments ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<Expn>((Expn)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argumentList ::= 
            {
              Object RESULT =null;
		 RESULT = new ASTList<Expn>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argumentList ::= arguments 
            {
              Object RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ASTList<Expn>)aList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inputs ::= inputs COMMA variable 
            {
              Object RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<compiler488.ast.Readable>)iList).addLast((compiler488.ast.Readable)v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputs",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inputs ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<compiler488.ast.Readable>((compiler488.ast.Readable)v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputs",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // output ::= NEWLINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NewlineConstExpn(nleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // output ::= TEXTCONST 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TextConstExpn(t.toString(), tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // output ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expn)e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // outputs ::= outputs COMMA output 
            {
              Object RESULT =null;
		int oListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object oList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<Printable>)oList).addLast((Printable)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // outputs ::= output 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<Printable>((Printable)o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedureHead ::= PROCEDURE IDENT L_PAREN parameterList R_PAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclarationHead(new DeclarationPart((String)name, nameleft), (ASTList<ScalarDecl>)pList, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureHead",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functionHead ::= FUNC IDENT L_PAREN parameterList R_PAREN COLON type 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclarationHead(new DeclarationPart((String)name,  nameleft), (ASTList<ScalarDecl>)pList, (Type)t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionHead",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanType(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerType(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // generalBound ::= MINUS INTCONST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstExpn(-(i.intValue()), ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generalBound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // generalBound ::= INTCONST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstExpn(i.intValue(), ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generalBound",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bound ::= generalBound DOT DOT generalBound 
            {
              Object RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstExpn[]{(IntConstExpn)lb, (IntConstExpn)ub}; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bound ::= INTCONST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConstExpn[]{new IntConstExpn(i.intValue(), ileft)}; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variablename ::= IDENT L_SQUARE bound COMMA bound R_SQUARE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclPart(name.toString(), (IntConstExpn[])b1, (IntConstExpn[])b2, nameleft ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablename",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variablename ::= IDENT L_SQUARE bound R_SQUARE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclPart(name.toString(), (IntConstExpn[])b, new IntConstExpn[]{}, nameleft ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablename",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variablename ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ScalarDeclPart(i.toString(), ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablename",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variablenames ::= variablenames COMMA variablename 
            {
              Object RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<DeclarationPart>)vList).addLast((DeclarationPart)v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenames",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variablenames ::= variablename 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new	ASTList<DeclarationPart>((DeclarationPart)v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablenames",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= FORWARD procedureHead 
            {
              Object RESULT =null;
		int pHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pHead = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RoutineDecl(((DeclarationHead)pHead).getDeclarationPart(), 
											null, 
											new RoutineBody(((DeclarationHead)pHead).getParameters(), 
															new Scope(pHeadleft), pHeadleft),
											true,
											pHeadleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= FORWARD functionHead 
            {
              Object RESULT =null;
		int fHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fHead = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RoutineDecl(((DeclarationHead)fHead).getDeclarationPart(), 
										((DeclarationHead)fHead).getType(), 
										new RoutineBody(((DeclarationHead)fHead).getParameters(), 
														new Scope(fHeadleft), fHeadleft),
										true,
										fHeadleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= procedureHead scope 
            {
              Object RESULT =null;
		int pHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pHead = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RoutineDecl(((DeclarationHead)pHead).getDeclarationPart(), 
											null, 
											new RoutineBody(((DeclarationHead)pHead).getParameters(), 
															(Scope)s, sleft),
											pHeadleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= functionHead scope 
            {
              Object RESULT =null;
		int fHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fHead = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RoutineDecl(((DeclarationHead)fHead).getDeclarationPart(), 
										((DeclarationHead)fHead).getType(), 
										new RoutineBody(((DeclarationHead)fHead).getParameters(), 
														(Scope)s, sleft),
										fHeadleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= VAR variablenames COLON type 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiDeclarations((ASTList<DeclarationPart>)v, (Type)t, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= scope 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((Scope)s).setIsMajor(false); RESULT = (Scope)s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= IDENT L_PAREN argumentList R_PAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureCallStmt(i.toString(), (ASTList<Expn>)args, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= GET inputs 
            {
              Object RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GetStmt((ASTList<compiler488.ast.Readable>)iList, iListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PUT outputs 
            {
              Object RESULT =null;
		int oListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object oList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PutStmt((ASTList<Printable>)oList, oListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReturnStmt(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= RESULT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ResultStmt((Expn)e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= EXIT WHEN expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExitStmt((Expn)e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= EXIT 
            {
              Object RESULT =null;
		int exitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExitStmt(null, exitleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= REPEAT statements UNTIL expression 
            {
              Object RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RepeatUntilStmt((Expn)e, (ASTList<Stmt>)sList, sListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE expression DO statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileDoStmt((Expn)e, (ASTList<Stmt>) sList, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF expression THEN statements ELSE statements FI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sList1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sList1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object sList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sList2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sList2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfStmt((Expn)e, (ASTList<Stmt>)sList1, (ASTList<Stmt>) sList2, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF expression THEN statements FI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfStmt((Expn)e, (ASTList<Stmt>)sList, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= variable COLON EQUAL expression 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStmt((Expn)v, (Expn)e, vleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= declarations declaration 
            {
              Object RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<Declaration>)dList).addLast((Declaration)d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<Declaration>((Declaration)d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statements statement 
            {
              Object RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((ASTList<Stmt>)sList).addLast((Stmt)s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTList<Stmt>((Stmt)s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scope ::= L_CURLEY R_CURLEY 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Scope(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scope ::= L_CURLEY statements R_CURLEY 
            {
              Object RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Scope((ASTList<Stmt>)sList, sListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scope ::= L_CURLEY declarations statements R_CURLEY 
            {
              Object RESULT =null;
		int dListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Scope((ASTList<Declaration>)dList, (ASTList<Stmt>)sList, dListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= scope 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program((Scope)s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

